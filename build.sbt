import play.core.PlayVersion
import play.sbt.PlayImport.{PlayKeys, _}
import sbt.Keys._
import sbt.Tests.{Group, SubProcess}
import sbt._
import uk.gov.hmrc.DefaultBuildSettings._
import uk.gov.hmrc.{SbtAutoBuildPlugin, _}
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin._
import uk.gov.hmrc.versioning.SbtGitVersioning
import uk.gov.hmrc.versioning.SbtGitVersioning.autoImport.majorVersion

val appName = "business-rates-authorisation"

lazy val scoverageSettings = {
  // Semicolon-separated list of regexs matching classes to exclude
  import scoverage.ScoverageKeys
  Seq(
    ScoverageKeys.coverageExcludedPackages := "<empty>;.*Reverse.*;views.*;config.*;poc.view.*;" +
      "poc.config.*;.*(AuthService|BuildInfo|Routes).*;businessrates.authorisation.config.*;" +
      "businessrates.authorisation.models.*",
    ScoverageKeys.coverageMinimum := 60,
    ScoverageKeys.coverageFailOnMinimum := false,
    ScoverageKeys.coverageHighlighting := true
  )
}

lazy val playSettings = Seq()

lazy val microservice = Project(appName, file("."))
  .enablePlugins(play.sbt.PlayScala, SbtAutoBuildPlugin, SbtGitVersioning, SbtDistributablesPlugin)
  .settings(playSettings ++ scoverageSettings: _*)
  .settings(scalaSettings: _*)
  .settings(publishingSettings: _*)
  .settings(defaultSettings(): _*)
  .settings(PlayKeys.playDefaultPort := 9525)
  .settings(majorVersion := 0)
  .settings(scalaVersion := "2.12.12")
  .settings(
    targetJvm := "jvm-1.8",
    Test / fork := true,
    libraryDependencies ++= compileDependencies ++ testDependencies,
    libraryDependencies ++= Seq(
      compilerPlugin("com.github.ghik" % "silencer-plugin" % "1.7.0" cross CrossVersion.full),
      "com.github.ghik" % "silencer-lib" % "1.7.0" % Provided cross CrossVersion.full
    ),
    retrieveManaged := true
  )
  .configs(IntegrationTest)
  .settings(inConfig(IntegrationTest)(Defaults.itSettings): _*)
  .settings(
    IntegrationTest / fork := false,
    IntegrationTest / unmanagedSourceDirectories := {(IntegrationTest / baseDirectory)(base => Seq(base / "it"))}.value,
    addTestReportOption(IntegrationTest, "int-test-reports"),
    IntegrationTest / testGrouping := oneForkedJvmPerTest((IntegrationTest / definedTests).value),
    IntegrationTest / parallelExecution := false
  )
  .settings(resolvers += Resolver.jcenterRepo)

def oneForkedJvmPerTest(tests: Seq[TestDefinition]) = tests.map { test =>
  Group(test.name, Seq(test), SubProcess(ForkOptions().withRunJVMOptions(Vector(s"-Dtest.name=${test.name}"))))
}

lazy val compileDependencies = Seq(
  ws,
  "uk.gov.hmrc"       %% "bootstrap-backend-play-28"    % "5.11.0",
  "org.typelevel"     %% "cats-core"                    % "1.6.1",
  "uk.gov.hmrc.mongo" %% "hmrc-mongo-play-28"           % "0.68.0"
)

lazy val testDependencies = Seq(
  "org.scalatest"          %% "scalatest"          % "3.0.8"             % "test",
  "org.scalatestplus.play" %% "scalatestplus-play" % "5.1.0"             % "test",
  "org.pegdown"            % "pegdown"             % "1.6.0"             % "test",
  "com.typesafe.play"      %% "play-test"          % PlayVersion.current % "test",
  "org.mockito"            % "mockito-core"        % "3.4.6"            % "test",
  "org.scalatestplus"      %% "mockito-3-4"        % "3.2.9.0"           % "test,it",
  "com.github.tomakehurst" % "wiremock-jre8"       % "2.23.2"            % "test",
  "org.scalacheck"         %% "scalacheck"         % "1.13.4"            % "test",
  "com.vladsch.flexmark"   % "flexmark-all"        % "0.35.10"           % "test,it"
)


ThisBuild / scalacOptions ++= Seq("-unchecked", "-deprecation", "-feature")
// silence all warnings on autogenerated files
scalacOptions += "-P:silencer:pathFilters=target/.*"
// Make sure you only exclude warnings for the project directories, i.e. make builds reproducible
scalacOptions += s"-P:silencer:sourceRoots=${baseDirectory.value.getCanonicalPath}"

addCommandAlias("precommit", ";scalafmt;test:scalafmt;coverage;test;coverageReport")
